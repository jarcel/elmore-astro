---
import Layout from "../../layouts/Layout.astro"
import InfoWrapper from "../../components/InfoWrapper.astro"
import FooterLink from "../../components/FooterLink.astro"
import SlideTagline from "../../components/SlideTagline.astro"
import SlideBookReview from "../../components/SlideBookReview.astro"
import { fetchBook } from "../../utils/fetchBook"
import { fetchBooks } from "../../utils/fetchBooks"

const { slug } = Astro.params
const book = await fetchBook(slug)

if (!book) {
  throw new Error("Book not found")
}

// Generate static paths at build time
export async function getStaticPaths() {
  const books = await fetchBooks()

  return books.map((book: { slug: string }) => ({
    params: { slug: book.slug },
  }))
}
---

<Layout
  sectionTitle="Books"
  classNames={["book", book.slug]}
  pageTitle=`${book.Title} | Elmore Leonard`
  sectionColor=`${book.PrimaryColor}`
>
  <div class="billboard">
    <picture>
      <source srcset={book.BillboardImage?.url} media="(min-width: 768px)" />
      <img src={book.BillboardImageMobile?.url} alt={book.title} />
    </picture>
    <h1>{book.Title}</h1>
  </div>
  <!-- Book Content -->
  <section class="section-wrapper white">
    <InfoWrapper title="The Run Down." primaryColor={book.PrimaryColor}>
      <div slot="main">
        <p class="synopsis" set:html={book.Synopsis} />
      </div>
      <div slot="side">
        <p>
          <span>
            <strong style=`color: ${book.PrimaryColor}`>Published:</strong>
            {book.Year}
          </span>
        </p>
        <p>
          <span>
            <strong style=`color: ${book.PrimaryColor}`>Publisher:</strong>
            {book.Publisher}
          </span>
        </p>
        { book.Genres.length > 0 && (
          <p>
            <span>
              <strong style=`color: ${book.PrimaryColor}`>{book.Genres.length > 1 ? "Genres:" : "Genre:"}</strong>
              {book.Genres.map((genre) => genre.Name).join(", ")}
            </span>
          </p>
        )}
        { book.Locations.length > 0 && (
          <p>
            <span>
              <strong style=`color: ${book.PrimaryColor}`>{book.Locations.length > 1 ? "Locations:" : "Location:"}</strong>
              {book.Locations.map((location) => location.Name).join(", ")}
            </span>
          </p>
        )}
      </div>
    </InfoWrapper>
  </section>
  <!-- /Book Content -->
  <!-- Book Slides -->
  {
    book.Slides?.map((slide) => {
      switch (slide.__typename) {
        case "ComponentSlidesTagline":
          return (
            <SlideTagline content={slide.Content} bgColor={book.PrimaryColor} />
          )
        case "ComponentSlidesReview":
          return (
            <SlideBookReview
              content={slide.Content}
              publicationImage={slide.PublicationImage?.url}
              credit={slide.Credit}
              bgColor={book.PrimaryColor}
            />
          )

        default:
          return null // Handle unknown slide types
      }
    })
  }
  <!-- /Book Slides -->
  <!-- Footer Links -->
  <footer>
    {
      book.NextBooks?.books.map(
        (
          nextBook: {
            Title: string
            FooterImage: { url: string }
            slug: string
            PrimaryColor: string
          },
          index: number
        ) => (
          <FooterLink
            className="next-link"
            href={`/books/${nextBook.slug}`}
            label={nextBook.Title}
            imgSrc={nextBook.FooterImage.url}
            bgColor={nextBook.PrimaryColor}
          />
        )
      )
    }
  </footer>
</Layout>
