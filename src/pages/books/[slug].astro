---
import Layout from "../../layouts/Layout.astro"
import InfoWrapper from "../../components/InfoWrapper.astro"
import FooterLink from "../../components/FooterLink.astro"
import Carousel from "../../components/Carousel.astro"
import ImageGallery from "../../components/ImageGallery.astro"
import { fetchBook } from "../../utils/fetchBook"
import { fetchBooks } from "../../utils/fetchBooks"
import { generateBookJsonLd } from "../../utils/generateJsonLd"
import { replaceUnderscoresWithSpaces } from "../../utils/formatText"

const { slug } = Astro.params
const book = await fetchBook(slug)
if (!book) {
  throw new Error("Book not found")
}
const jsonLd = generateBookJsonLd(book)

// Generate static paths at build time
export async function getStaticPaths() {
  const books = await fetchBooks()

  return books.map((book: { slug: string }) => ({
    params: { slug: book.slug },
  }))
}

const pageTitle = `${book.Title} | Elmore Leonard`
const metaDescription = `"${book.Title}", a novel by Elmore Leonard, published in ${book.Year}. ${book.Synopsis}`
const metaKeywords = `Elmore Leonard, ${book.Title}, crime novels, western fiction`
const metaImage =
  book.BillboardImage?.url || `${Astro.site}images/social/el-opengraph.jpg`
---

<Layout
  sectionTitle="Books"
  classNames={["book", "single-book", book.slug]}
  pageTitle={pageTitle}
  sectionColor=`${book.PrimaryColor}`
  jsonLdData={jsonLd}
  metaDescription={metaDescription}
  metaKeywords={metaKeywords}
  metaImage={metaImage}
>
  <div class="billboard">
    <picture>
      <source srcset={book.BillboardImage?.url} media="(min-width: 768px)" />
      <img src={book.BillboardImageMobile?.url} alt={book.title} />
    </picture>
    <h1>{book.Title}</h1>
  </div>
  <!-- Book Content -->
  <section class="section-wrapper white">
    <InfoWrapper title="The Run Down." primaryColor={book.PrimaryColor}>
      <div slot="main">
        <p class="synopsis" set:html={book.Synopsis} />
      </div>
      <div slot="side">
        <p>
          <span>
            <strong style={`color: ${book.PrimaryColor}`}>Published:</strong>
            {book.Year}
          </span>
        </p>
        <p>
          <span>
            <strong style={`color: ${book.PrimaryColor}`}>Publisher:</strong>
            {book.Publisher}
          </span>
        </p>
        {
          book.Genres.length > 0 && (
            <p>
              <span>
                <strong style={`color: ${book.PrimaryColor}`}>
                  {book.Genres.length > 1 ? "Genres:" : "Genre:"}
                </strong>
                {book.Genres.map(
                  (
                    genre: {
                      Name: string
                      slug: string
                    },
                    index: number
                  ) => (
                    <>
                      {index > 0 && ", "}
                      <a
                        href={`/books/genre/${genre.slug}`}
                        aria-label={`Books in the ${genre.Name} genre`}
                      >
                        {genre.Name}
                      </a>
                    </>
                  )
                )}
              </span>
            </p>
          )
        }
        {
          book.Adaptation.length > 0 && (
            <p>
              <span>
                <strong style={{ color: book.PrimaryColor }}>
                  {book.Adaptation.length > 1 ? "Adaptations:" : "Adaptation:"}
                </strong>{" "}
                {book.Adaptation.map(
                  (
                    adaptation: {
                      Type: string
                      adaptation: {
                        Title: string
                        Year: string
                        slug: string
                      }
                    },
                    index: number
                  ) => (
                    <span>
                      {adaptation.adaptation &&
                      adaptation.adaptation.Title === book.Title ? (
                        <a
                          href={`/film/${adaptation.adaptation.slug}`}
                          aria-label={`More about the film ${adaptation.adaptation.Title}`}
                        >
                          {replaceUnderscoresWithSpaces(adaptation.Type)}
                          {`(${adaptation.adaptation.Year})`}
                        </a>
                      ) : adaptation.adaptation ? (
                        <a
                          href={`/film/${adaptation.adaptation.slug}`}
                          aria-label={`More about the film ${adaptation.adaptation.Title}`}
                        >
                          {replaceUnderscoresWithSpaces(adaptation.Type)}
                          {`(${adaptation.adaptation.Title})`}
                        </a>
                      ) : (
                        replaceUnderscoresWithSpaces(adaptation.Type)
                      )}
                      {index < book.Adaptation.length - 1 && ", "}{" "}
                    </span>
                  )
                )}
              </span>
            </p>
          )
        }
        {
          book.Locations.length > 0 && (
            <p>
              <span>
                <strong style={`color: ${book.PrimaryColor}`}>
                  {book.Locations.length > 1 ? "Locations:" : "Location:"}
                </strong>
                {book.Locations.map(
                  (
                    location: {
                      Name: string
                      slug: string
                    },
                    index: number
                  ) => (
                    <>
                      {index > 0 && ", "}
                      <a
                        href={`/books/location/${location.slug}`}
                        aria-label={`Books set in ${location.Name}`}
                      >
                        {location.Name}
                      </a>
                    </>
                  )
                )}
              </span>
            </p>
          )
        }
        {
          book.Characters.length > 0 && (
            <p>
              <span>
                <strong style={`color: ${book.PrimaryColor}`}>
                  {book.Characters.length > 1 ? "Characters:" : "Character:"}
                </strong>
                {book.Characters.map(
                  (
                    character: {
                      Name: string
                      slug: string
                    },
                    index: number
                  ) => (
                    <>
                      {index > 0 && ", "}
                      <a
                        href={`/books/character/${character.slug}`}
                        aria-label={`Books featuring ${character.Name}`}
                      >
                        {character.Name}
                      </a>
                    </>
                  )
                )}
              </span>
            </p>
          )
        }
      </div>
    </InfoWrapper>
  </section>
  <!-- /Book Content -->
  <!-- Book Slides -->
  {
    book.Slides && (
      <Carousel slides={book.Slides} primaryColor={book.PrimaryColor} />
    )
  }
  <!-- /Book Slides -->
  <!-- Covers -->
  <section class="section-wrapper white">
    <ImageGallery images={book.BookCovers} title="Alternate Covers" />
  </section>
  <!-- /Covers -->
  <!-- Footer Links -->
  <footer>
    {
      book.NextBooks?.books.map(
        (
          nextBook: {
            Title: string
            FooterImage: { url: string }
            slug: string
            PrimaryColor: string
          },
          index: number
        ) => (
          <FooterLink
            className="next-link"
            href={`/books/${nextBook.slug}`}
            label={nextBook.Title}
            imgSrc={nextBook.FooterImage.url}
            bgColor={nextBook.PrimaryColor}
            ariaLabel={`More about ${nextBook.Title}`}
          />
        )
      )
    }
  </footer>
</Layout>
